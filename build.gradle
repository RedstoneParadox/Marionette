plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

// sourceCompatibility = JavaVersion.VERSION_1_8
// targetCompatibility = JavaVersion.VERSION_1_8

// archivesBaseName = project.archives_base_name
// version = project.mod_version
// group = project.maven_group

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release/'
	}
}
/*
minecraft {
	accessWidener = file("src/main/resources/marionette.accesswidener")
}

 */

/*
sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

 */

dependencies {
	/*
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	// Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	/*
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	*/
	/*
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilt.standard.libraries
	modImplementation libs.quilted.fabric.api

	 */

	/*
	compile "org.jetbrains:annotations:${project.jetbrains_annotations}"

	afterEvaluate {
		testmodImplementation sourceSets.main.output
	}

	 */
}

/*
processResources {
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

 */

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

/*
java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

jar {
	filesMatching('LICENSE') {
		rename '^(LICENSE.*?)(\\..*)?$', "\$1_${archivesBaseName}\$2"
	}
}

 */

/*
// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			groupId = group
			artifactId = archivesBaseName
			version = project.version
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		def env = System.getenv()
		maven {
			url = "https://maven.redstoneparadox.xyz/releases"
			credentials {
				username = env.MAVEN_USER_RP
				password = env.MAVEN_PASSWORD_RP
			}
		}
	}
}

 */
